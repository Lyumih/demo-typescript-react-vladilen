{"version":3,"sources":["components/Navbar.tsx","components/TodoForm.tsx","components/TodoList.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Navbar","className","href","id","TodoForm","props","ref","useRef","onKeyPress","event","key","onAdd","current","value","type","placeholder","htmlFor","TodoList","todos","onRemove","onToggle","length","map","todo","classes","completed","push","join","checked","onChange","bind","title","onClick","preventDefault","removeHandler","App","useState","setTodos","newTodo","Date","now","prev","window","confirm","filter","console","log","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"6OAEaA,EAAmB,kBAC9B,6BACE,yBAAKC,UAAU,+BACb,uBAAGC,KAAK,IAAID,UAAU,mBAAtB,sBAGA,wBAAIE,GAAG,aAAaF,UAAU,SAC5B,4BACE,uBAAGC,KAAK,KAAR,4DAEF,4BACE,uBAAGA,KAAK,KAAR,qECPGE,EAAoC,SAACC,GAOhD,IAAMC,EAAMC,iBAAyB,MAWrC,OACE,yBAAKN,UAAU,mBACb,2BAEEO,WAbkB,SAACC,GACL,UAAdA,EAAMC,MACRL,EAAMM,MAAML,EAAIM,QAASC,OACzBP,EAAIM,QAASC,MAAQ,KAYnBP,IAAKA,EACLQ,KAAK,OACLC,YAAY,uHACZZ,GAAG,UAEL,2BAAOa,QAAQ,QAAQf,UAAU,UAAjC,0HC1BOgB,EAAoC,SAAC,GAI3C,IAHLC,EAGI,EAHJA,MACAC,EAEI,EAFJA,SACAC,EACI,EADJA,SAEA,GAAqB,IAAjBF,EAAMG,OACR,OAAO,uBAAGpB,UAAU,UAAb,mEAST,OACE,4BACGiB,EAAMI,KAAI,SAACC,GACV,IAAMC,EAAU,CAAC,QAIjB,OAHID,EAAKE,WACPD,EAAQE,KAAK,aAGb,wBAAIzB,UAAWuB,EAAQG,KAAK,KAAMjB,IAAKa,EAAKpB,IAC1C,+BACE,2BACEW,KAAK,WACLc,QAASL,EAAKE,UACdI,SAAUT,EAASU,KAAK,KAAMP,EAAKpB,MAErC,8BAAOoB,EAAKQ,OACZ,uBACE9B,UAAU,0BACV+B,QAAS,SAACvB,GAAD,OAxBD,SAACA,EAAyBN,GAC9CM,EAAMwB,iBAENd,EAAShB,GAqBuB+B,CAAczB,EAAOc,EAAKpB,MAFhD,iBCkBCgC,EApDO,WAAO,IAAD,EACAC,mBAAkB,IADlB,mBACnBlB,EADmB,KACZmB,EADY,KAqC1B,OACE,oCACE,kBAAC,EAAD,MACA,yBAAKpC,UAAU,aACb,kBAAC,EAAD,CAAUU,MAtCG,SAACoB,GAClB,IAAMO,EAAiB,CACrBP,QACA5B,GAAIoC,KAAKC,MACTf,WAAW,GAGbY,GAAS,SAACI,GAAD,OAAWH,GAAX,mBAAuBpB,UAgC5B,kBAAC,EAAD,CACEA,MAAOA,EACPC,SAhBc,SAAChB,GACDuC,OAAOC,QACzB,4MAGAN,GAAS,SAACI,GAAD,OAAUA,EAAKG,QAAO,SAACrB,GAAD,OAAUA,EAAKpB,KAAOA,SAYjDiB,SAhCc,SAACjB,GACrB0C,QAAQC,IAAI,QACZT,GAAS,SAACI,GAAD,OACPA,EAAKnB,KAAI,SAACC,GAOR,OANIA,EAAKpB,KAAOA,IAEd0C,QAAQC,IAAI,cACZvB,EAAKE,WAAaF,EAAKE,WAGlBF,cCjBKwB,QACW,cAA7BL,OAAOM,SAASC,UAEe,UAA7BP,OAAOM,SAASC,UAEhBP,OAAOM,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLlB,QAAQkB,MAAMA,EAAMC,a","file":"static/js/main.24c1feea.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nexport const Navbar: React.FC = () => (\r\n  <nav>\r\n    <div className=\"nav-wrapper purple darken-2\">\r\n      <a href=\"/\" className=\"brand-logo left\">\r\n        React + TypeScript\r\n      </a>\r\n      <ul id=\"nav-mobile\" className=\"right\">\r\n        <li>\r\n          <a href=\"/\">Список дел</a>\r\n        </li> \r\n        <li>\r\n          <a href=\"/\">Информация</a>\r\n        </li>\r\n      </ul>\r\n    </div>\r\n  </nav>\r\n);\r\n","import React, { useRef } from \"react\";\r\n\r\ninterface TodoFormProps {\r\n  onAdd(title: string): void;\r\n}\r\n\r\nexport const TodoForm: React.FC<TodoFormProps> = (props) => {\r\n  //   const [title, setTitle] = useState<string>(\"\");\r\n\r\n  //   const changeHandler = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n  //     setTitle(event.target.value);\r\n  //   };\r\n\r\n  const ref = useRef<HTMLInputElement>(null);\r\n\r\n  const keyPressHandler = (event: React.KeyboardEvent) => {\r\n    if (event.key === \"Enter\") {\r\n      props.onAdd(ref.current!.value);\r\n      ref.current!.value = \"\";\r\n      //   console.log(title);\r\n      //   setTitle('')\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"input-field mt2\">\r\n      <input\r\n        // onChange={changeHandler}\r\n        onKeyPress={keyPressHandler}\r\n        // value={title}\r\n        ref={ref}\r\n        type=\"text\"\r\n        placeholder=\"Введите название дела\"\r\n        id=\"title\"\r\n      />\r\n      <label htmlFor=\"title\" className=\"active\">\r\n        Введите название дела\r\n      </label>\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { ITodo } from \"../intefaces\";\r\n\r\ntype TodoListProps = {\r\n  todos: ITodo[];\r\n  onToggle(id: number): void;\r\n  onRemove: (id: number) => void;\r\n};\r\n\r\nexport const TodoList: React.FC<TodoListProps> = ({\r\n  todos,\r\n  onRemove,\r\n  onToggle,\r\n}) => {\r\n  if (todos.length === 0) {\r\n    return <p className=\"center\">Пока дел нет!</p>;\r\n  }\r\n\r\n  const removeHandler = (event: React.MouseEvent, id: number) => {\r\n    event.preventDefault();\r\n\r\n    onRemove(id);\r\n  };\r\n\r\n  return (\r\n    <ul>\r\n      {todos.map((todo) => {\r\n        const classes = [\"todo\"];\r\n        if (todo.completed) {\r\n          classes.push(\"completed\");\r\n        }\r\n        return (\r\n          <li className={classes.join(\" \")} key={todo.id}>\r\n            <label>\r\n              <input\r\n                type=\"checkbox\"\r\n                checked={todo.completed}\r\n                onChange={onToggle.bind(null, todo.id)}\r\n              />\r\n              <span>{todo.title}</span>\r\n              <i\r\n                className=\"material-icons red-text\"\r\n                onClick={(event) => removeHandler(event, todo.id)}\r\n              >\r\n                delete\r\n              </i>\r\n            </label>\r\n          </li>\r\n        );\r\n      })}\r\n    </ul>\r\n  );\r\n};\r\n","import React, { useState } from \"react\";\nimport { Navbar } from \"./components/Navbar\";\nimport { TodoForm } from \"./components/TodoForm\";\nimport { TodoList } from \"./components/TodoList\";\nimport { ITodo } from \"./intefaces\";\n\nconst App: React.FC = () => {\n  const [todos, setTodos] = useState<ITodo[]>([]);\n\n  const addHandler = (title: string) => {\n    const newTodo: ITodo = {\n      title,\n      id: Date.now(),\n      completed: false,\n    };\n    // setTodos([newTodo, ...todos]);\n    setTodos((prev) => [newTodo, ...todos]);\n  };\n\n  const toggleHandler = (id: number) => {\n    console.log(\"test\");\n    setTodos((prev) =>\n      prev.map((todo) => {\n        if (todo.id === id) {\n          debugger;\n          console.log(\"need fixed\");\n          todo.completed = !todo.completed;\n          // todo.completed = true;\n        }\n        return todo;\n      })\n    );\n  };\n\n  const removeHandler = (id: number) => {\n    const shoudRemove = window.confirm(\n      \"Вы уверены, что хотите удалить элемент?\"\n    );\n    if (shoudRemove) {\n      setTodos((prev) => prev.filter((todo) => todo.id !== id));\n    }\n  };\n\n  return (\n    <>\n      <Navbar />\n      <div className=\"container\">\n        <TodoForm onAdd={addHandler} />\n        <TodoList\n          todos={todos}\n          onRemove={removeHandler}\n          onToggle={toggleHandler}\n        />\n      </div>\n    </>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}